'''
from typing import (
    TYPE_CHECKING,
)

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

from nomad.config import config
from nomad.datamodel.data import Schema
from nomad.datamodel.metainfo.annotations import ELNAnnotation, ELNComponentEnum
from nomad.metainfo import Quantity, SchemaPackage

configuration = config.get_plugin_entry_point(
    'nomad_theia_plugin.schema_packages:schema_package_entry_point'
)
 = SchemaPackage()


class NewSchemaPackage(Schema):
    name = Quantity(
        type=str, a_eln=ELNAnnotation(component=ELNComponentEnum.StringEditQuantity)
    )
    message = Quantity(type=str)

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        super().normalize(archive, logger)

        logger.info('NewSchema.normalize', parameter=configuration.parameter)
        self.message = f'Hello {self.name}!'

.__init_metainfo__()
'''

#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from typing import (
    TYPE_CHECKING,
)

import numpy as np
from nomad.datamodel.data import ArchiveSection, Schema
from nomad.datamodel.metainfo.basesections import (
    CompositeSystemReference,
    EntityReference,
    InstrumentReference,
    Process,
    SynthesisMethod,
)
from nomad.datamodel.metainfo.basesections.v1 import (
    EntityReference,  # noqa: F811
    Instrument,
    Measurement,
    MeasurementResult,
)
from nomad.datamodel.metainfo.eln import (
    ELNCollection,
    ELNInstrument,
    ELNSample,
    ELNSubstance,
)
from nomad.datamodel.metainfo.plot import PlotSection
from nomad.metainfo import (
    Package,
    Quantity,
    Section,
    SubSection,
)
from nomad_measurements.transmission.schema import (
    ELNUVVisNirTransmission,
    Spectrophotometer,
    UVVisNirTransmissionResult,
)

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='in-line microfluidic SAXS experiment')


class Nanoparticle(ELNSample, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Nanoparticle` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class NanoparticleReference(CompositeSystemReference, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    reference = Quantity(
        type=Nanoparticle,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `NanoparticleReference` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Precursor(ELNSubstance, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Precursor` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class PrecursorReference(EntityReference, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    reference = Quantity(
        type=Precursor,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `PrecursorReference` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Precursors(ELNCollection, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    nanoparticle = Quantity(
        type=NanoparticleReference,
    )
    entities = SubSection(
        section_def=PrecursorReference,
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Precursors` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class MicrofluidicPrecursorDevice(ELNInstrument, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    channelLength = Quantity(
        type=np.float64,
        unit="mm",
    )
    channelDiameter = Quantity(
        type=np.float64,
        unit="mm",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `MicrofluidicPrecursorDevice` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class MicrofluidicPrecursorDeviceReference(InstrumentReference, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    reference = Quantity(
        type=MicrofluidicPrecursorDevice,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `MicrofluidicPrecursorDeviceReference` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class PrecursorPretreatment(Process, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    temperature = Quantity(
        type=np.float64,
        unit="C",
        shape=["*"],
    )
    dispensed_volume = Quantity(
        type=np.float64,
        unit="ml",
        shape=["*"],
    )
    instruments = SubSection(
        section_def=MicrofluidicPrecursorDevice,
        repeats=True,
    )
    precursor = SubSection(
        section_def=PrecursorReference,
        repeats=False,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `PrecursorPretreatment` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class MicrofluidicMixingDevice(ELNInstrument, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    channelLength = Quantity(
        type=np.float64,
        unit="mm",
    )
    channelDiameter = Quantity(
        type=np.float64,
        unit="mm",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `MicrofluidicMixingDevice` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class MicrofluidicReaction(SynthesisMethod, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    temperature = Quantity(
        type=np.float64,
        unit="C",
        shape=["*"],
    )
    instruments = SubSection(
        section_def=MicrofluidicMixingDevice,
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `MicrofluidicReaction` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class UVVisSpectrometer(Spectrophotometer, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `UVVisSpectrometer` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class UVVisSpectrometerReference(EntityReference, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    reference = Quantity(
        type=UVVisSpectrometer,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `UVVisSpectrometerReference` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class UVVisNirResult(UVVisNirTransmissionResult, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `UVVisNirResult` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class UVVisNirTransmissionMeasurement(ELNUVVisNirTransmission, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    samples = SubSection(
        section_def=NanoparticleReference,
    )
    instruments = SubSection(
        section_def=UVVisSpectrometerReference,
    )
    results = SubSection(
        section_def=UVVisNirResult,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `UVVisNirTransmissionMeasurement` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class SAXSInstrument(Instrument, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `SAXSInstrument` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class SAXSInstrumentReference(EntityReference, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    reference = Quantity(
        type=SAXSInstrument,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `SAXSInstrumentReference` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class SAXSMeasurement(Measurement, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `SAXSMeasurement` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class SAXSResults(MeasurementResult, PlotSection, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    intensities = Quantity(
        type=np.float64,
        shape=[['*']],
    )
    q = Quantity(
        type=np.float64,
        unit="1 / angstrom",
        shape=[['*']],
    )
    errors = Quantity(
        type=np.float64,
        shape=[['*']],
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `SAXSResults` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class NanoparticleExperiment(Schema, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    UVvis_data = SubSection(
        section_def=UVVisNirResult,
    )
    SAXS_data = SubSection(
        section_def=SAXSResults,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `NanoparticleExperiment` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


m_package.__init_metainfo__()
